function randomWholeNum() {

  // Only change code below this line

  return Math.floor(Math.random() * 10);
}
==============================================

Short cicruit evluation:

Let us take one more example:

let name = user.name || 'No name'


Translated code:

let name = ''
if (!user.name) { 
 name = 'No name'
}
else {
 name = user.name
 
===================================================


function randomRange(myMin, myMax) {
  // Only change code below this line
  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}


===================================================
The parseInt() function parses a string and returns an integer. Here's an example:

const a = parseInt("007");
The above function converts the string 007 to the integer 7. 


===================================================
The parseInt() function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.

const a = parseInt("11", 2);
The radix variable says that 11 is in the binary system, or base 2. This example converts the string 11 to an integer 3.

===================================================
The conditional operator, also called the ternary operator, can be used as a one line if-else expression.

The syntax is a ? b : c, where a is the condition, b is the code to run when the condition returns true, and c is the code to run when the condition returns false.

The following function uses an if/else statement to check a condition:

function findGreater(a, b) {
  if(a > b) {
    return "a is greater";
  }
  else {
    return "b is greater or equal";
  }
}
This can be re-written using the conditional operator:

function findGreater(a, b) {
  return a > b ? "a is greater" : "b is greater or equal";
}


===================================================
function findGreaterOrEqual(a, b) {
  if (a === b) {
    return "a and b are equal";
  }
  else if (a > b) {
    return "a is greater";
  }
  else {
    return "b is greater";
  }
}
The above function can be re-written using multiple conditional operators:

function findGreaterOrEqual(a, b) {
  return (a === b) ? "a and b are equal" 
    : (a > b) ? "a is greater" 
    : "b is greater";
}



===================================================
Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: multiply the first n elements of an array to create the product of those elements. Using a for loop, you could do this:

  function multiply(arr, n) {
    let product = 1;
    for (let i = 0; i < n; i++) {
      product *= arr[i];
    }
    return product;
  }
However, notice that multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]. That means you can rewrite multiply in terms of itself and never need to use a loop.

  function multiply(arr, n) {
    if (n <= 0) {
      return 1;
    } else {
      return multiply(arr, n - 1) * arr[n - 1];
    }
  }



===================================================
// Only change code below this line
function countdown(n){
   if (n < 1) {
    return [];
  } else {
    const countArray = countdown(n - 1);
    countArray.unshift(n);
    return countArray;
  }
}




===================================================

function rangeOfNumbers(startNum, endNum) {
  if (startNum === endNum){
      return [startNum];
  }
  else {
    const rangeArr = rangeOfNumbers(startNum, endNum - 1);
    rangeArr.push(endNum);
    return rangeArr;
  }
};

console.log(rangeOfNumbers(1,6))



===================================================

How to find length
--------------------

console.log("Alan Peter".length);




===================================================
Arrays methods
---------------

*	.push() takes one or more parameters and "pushes" them onto the end of the array.
*	.pop() is used to pop a value off of the end of an array. We can store this popped off value by assigning it to a variable. In other words, .pop() removes the last element from an array and returns that element.
*	That's where .shift() comes in. It works just like .pop(), except it removes the first element instead of the last.
*	.unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.



===================================================
ES 6 course
===================================================
function checkScope() {
  let i = 'function scope';
  if (true) {
    let i = 'block scope';
    console.log('Block scope i is: ', i);
  }
  console.log('Function scope i is: ', i);
  return i;
}






===================================================

sentence.toUpperCase()



===================================================
const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];

const result = words.filter(word => word.length > 6);

console.log(result);
// Expected output: Array ["exuberant", "destruction", "present"]



===================================================
let firstNames = ["super", "spider", "ant", "iron"]
let lastName = "man";

let fullNames = firstNames.map(firstName => firstName + lastName);

console.log(fullNames);

// ["superman", "spiderman", "antman", "ironman"]


===================================================
function check(a,x){
  return a.includes(x);
};
===================================================

const helloMagicWorldArray = ["Hello", "Magic", "World"]
const helloMagicWorldString = helloMagicWorldArray.join("")
console.log(helloMagicWorldString)
// Output: "HelloMagicWorld"




===================================================
const array1 = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue
);

console.log(sumWithInitial);
// Expected output: 10



===================================================

Просуммировать все положительные числа массива

function positiveSum(arr) {
  return arr.filter(value => value > 0 ).reduce((accum,current) => accum + current,0);
}



===================================================
As seen in the previous challenge, const declaration alone doesn't really protect your data from mutation. To ensure your data doesn't change, JavaScript provides a function Object.freeze to prevent data mutation.

Any attempt at changing the object will be rejected, with an error thrown if the script is running in strict mode.

let obj = {
  name:"FreeCodeCamp",
  review:"Awesome"
};
Object.freeze(obj);





===================================================
const myFunc = function() {
  const myVar = "value";
  return myVar;
}
ES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use arrow function syntax:

const myFunc = () => {
  const myVar = "value";
  return myVar;
}
When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword return as well as the brackets surrounding the code. This helps simplify smaller functions into one-line statements:

const myFunc = () => "value";
This code will still return the string value by default.




===================================================
If an arrow function has a single parameter, the parentheses enclosing the parameter may be omitted.

const doubler = item => item * 2;






===================================================

In order to help us create more flexible functions, ES6 introduces default parameters for functions.

Check out this code:

const greeting = (name = "Anonymous") => "Hello " + name;

console.log(greeting("John"));
console.log(greeting());
The console will display the strings Hello John and Hello Anonymous.





===================================================
Use the Rest Parameter with Function Parameters

In order to help us create more flexible functions, ES6 introduces the rest parameter for function parameters. With the rest parameter, you can create functions that take a variable number of arguments. These arguments are stored in an array that can be accessed later from inside the function.

Check out this code:

function howMany(...args) {
  return "You have passed " + args.length + " arguments.";
}
console.log(howMany(0, 1, 2));
console.log(howMany("string", null, [1, 2, 3], { }))



===================================================
Destructuring assignment is special syntax introduced in ES6, for neatly assigning values taken directly from an object.

Consider the following ES5 code:

	const user = { name: 'John Doe', age: 34 };

	const name = user.name;
	const age = user.age;


Here's an equivalent assignment statement using the ES6 destructuring syntax:

	const { name, age } = user;


===================================================
How to swap the variables

let a = 8, b = 6;
// Only change code below this line
[a,b] = [b,a]



===================================================
The result is similar to Array.prototype.slice(), as shown below:

const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
console.log(a, b);
console.log(arr);
The console would display the values 1, 2 and [3, 4, 5, 7].





===================================================
let testStr = "freeCodeCamp";
let testRegex = /Code/;
testRegex.test(testStr);
The test method here returns true.




===================================================
Count of positives / sum of negatives

function countPositivesSumNegatives(input) {
  if (input === null) {
    return [];
  } else if (input.length === 0){
    return [];
  } else {
  let arrFin = [];
  arrFin.push(input.filter(value => value > 0).reduce((accum) => accum + 1,0));
  arrFin.push(input.filter(value => value < 0).reduce((accum,current) => accum + current,0));
  return arrFin;
    }
}



===================================================
if (val === 1) {
  answer = "a";
} else if (val === 2) {
  answer = "b";
} else {
  answer = "c";
}
can be replaced with:

switch (val) {
  case 1:
    answer = "a";
    break;
  case 2:
    answer = "b";
    break;
  default:
    answer = "c";
}





===================================================
Reverse words

My code:
	function reverseWords(str) {
		let strarr = str.split(' ');
		for (let i = 0; i < strarr.length; i++) {
			strarr[i] = strarr[i].split('').reverse().join('');
		}
		return strarr.join(' ');
}


My upgraded version: 
function reverseWords(str) {
  return str.split(' ').map(value => value.split('').reverse().join('')).join(' ');
}



===================================================
Does my number look big in this?

 my code:
 
	function narcissistic(value) {
		let valstr = value.toString();
		let sum = 0;
		for (i = 0; i < valstr.length; i++) {
			sum += Number(valstr[i]) ** valstr.length;
		}
	return sum === value ? true : false;
}

Another interesting solution:

function narcissistic( value ) {
  return ('' + value).split('').reduce(function(p, c){
    return p + Math.pow(c, ('' + value).length)
    }, 0) == value;
}




===================================================
Повторение строки - str.repeat(Количество повторений)

function accum(s) {
	let arr = [];
  for (let i = 0; i < s.length; i++) {
    arr.push(s[i].toUpperCase() + s[i].toLowerCase().repeat(i));
    
  }
  return arr.join('-');
}






===================================================
Рекурсия пример

Задача:
Write a function that takes a positive integer n, sums all the cubed values from 1 to n (inclusive), and returns that sum.

Assume that the input n will always be a positive integer.

Examples: (Input --> output)

2 --> 9 (sum of the cubes of 1 and 2 is 1 + 8)
3 --> 36 (sum of the cubes of 1, 2, and 3 is 1 + 8 + 27)


Цикл:
function sumCubes(n){
  let sum = 0;
  for (let i = 1; i <= n; i++) {
    sum += i ** 3;
  }
  return sum;
}




Рекурсия:

function sumCubes(n){
  if (n == 1) {
    return n**3;
  } else {
    return n**3 + sumCubes(n - 1);
  }
}



===================================================
My solution:

function filterHomogenous(arrays) {
  let arraysfinal = []
  for (let i = 0; i < arrays.length; i++) {
    let equal = true;
    for (let j = 0; j < arrays[i].length - 1; j++) {
      if ( typeof arrays[i][j] !== typeof arrays[i][j + 1] ) 
        {
          equal = false;
        }
    }
    if (equal && arrays[i].length !== 0 ) {
      arraysfinal.push(arrays[i]);
    }
  }
  return arraysfinal;
}


One more solution:

function filterHomogenous(arr) {
  return arr.filter(subArr => subArr.length > 0 && subArr.every(val => typeof val === typeof subArr[0]));
}

===================================================
Как сделать из двух массивов один ?

function arrayPlusArray(arr1, arr2) {
  return arr1.concat(arr2);
}

или

function arrayPlusArray(arr1, arr2) {
  let arr = [...arr1, ...arr2];
}

===================================================
Array plus array

function arrayPlusArray(arr1, arr2) {
  return arr1.reduce((sum, item) => sum + item, 0) + arr2.reduce((sum, item) => sum + item, 0);
}

===================================================

Every USAGE

const isBelowThreshold = (currentValue) => currentValue < 40;

const array1 = [1, 30, 39, 29, 10, 13];

console.log(array1.every(isBelowThreshold));
// Expected output: true




===================================================

Array Array Array


my solution:
	function explode(x){
  let score = 0;
  if (typeof x[0] !== typeof 4 && typeof x[1] !== typeof 4 ) {
    return 'Void!';
    } else if (typeof x[0] === typeof x[1]) {
      score = x[0] + x[1];
    } else {
      if (typeof x[0] === typeof 4) {
        score = x[0];
      } else {score = x[1];}
    }
  return Array(score).fill(x);
}


another solution:

function explode(x){
  let [a,b] = x;
  
  if(typeof a == "number" && typeof b == "number") return new Array(a+b).fill(x);
  else if(typeof a == "number") return new Array(a).fill(x);
  else if(typeof b == "number") return new Array(b).fill(x);
  
  return 'Void!';
}


===================================================
Contamination #1 -String-

function contamination(text, char){
  return char.repeat(text.length)
}



===================================================
Thinkful - Logic Drills: Traffic light
JavaScript:
function updateLight(current) {
  
  return current === "green" ? "yellow" : current === "yellow" ? "red" : "green"
}




===================================================
You Can't Code Under Pressure #1
JavaScript:
function doubleInteger(i) {
  // i will be an integer. Double it and return it.
  return i * 2;
}

===================================================
Calculate BMI
JavaScript:
function bmi(weight, height) {
  let bmi = weight/(height ** 2);
  return bmi <= 18.5 ? "Underweight"
  : bmi <= 25 ? "Normal"
  : bmi <= 30 ? "Overweight"
  : "Obese"
}

===================================================

Count the number of cubes with paint on
JavaScript:
function countSquares(cuts){
  
  return cuts === 0 ? 1 : cuts === 1 ? 8: (cuts + 1) ** 3 - (cuts - 1) ** 3;
}


===================================================
String repeat
JavaScript:
function repeatStr (n, s) {
  return s.repeat(n);
}


===================================================
Cat years, Dog years
JavaScript:
var humanYearsCatYearsDogYears = function(humanYears) {
  // Your code here!
  let catYears = (humanYears == 1) ? 15 : (humanYears == 2) ? 24 : (humanYears - 2) * 4 + 24 ;
  let dogYears = (humanYears == 1) ? 15 : (humanYears == 2) ? 24 : (humanYears - 2) * 5 + 24 ;
  
  
  
  return [humanYears,catYears,dogYears];
}

===================================================
Determine offspring sex based on genes XX and XY chromosomes
JavaScript:
function chromosomeCheck(sperm) {
  return `Congratulations! You're going to have a ${sperm == "XX" ? "daughter" : "son"}.`
}



===================================================
Simple multiplication
JavaScript:
function simpleMultiplication(number) {
    return number % 2 === 0 ? number * 8 : number * 9;
}


===================================================
Find Nearest square number
JavaScript:
function nearestSq(n){
    return Math.round(Math.sqrt(n)) ** 2;
}

===================================================
c=
`\
c\
o\
n\
s\
t\
r\
u\
c\
t\
o\
r`
c[
c]
[c
](
`f
=(
)\
=>
'\
H\
e\
l\
l\
o\
,\
 \
w\
o\
r\
l\
d\
!\
'`
)(
)





===================================================

var lastDigit = function(str1, str2){  
  return +!+str2 || Math.pow(str1.slice(-1),str2.slice(-2) % 4 || 4) % 10;
}



===================================================
let myString = "freeCodeCamp";
let fccRegex = /freeCodeCamp/i; // Change this line
let result = fccRegex.test(myString);
===================================================
let petString = "James has a pet cat.";
let petRegex = /dog|cat|bird|fish/; // Change this line
let result = petRegex.test(petString);
===================================================




===================================================



===================================================




===================================================




===================================================





===================================================





===================================================






===================================================





===================================================







===================================================