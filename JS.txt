function randomWholeNum() {

  // Only change code below this line

  return Math.floor(Math.random() * 10);
}
==============================================

Short cicruit evluation:

Let us take one more example:

let name = user.name || 'No name'


Translated code:

let name = ''
if (!user.name) { 
 name = 'No name'
}
else {
 name = user.name
 
===================================================


function randomRange(myMin, myMax) {
  // Only change code below this line
  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;
  // Only change code above this line
}


===================================================
The parseInt() function parses a string and returns an integer. Here's an example:

const a = parseInt("007");
The above function converts the string 007 to the integer 7. 


===================================================
The parseInt() function parses a string and returns an integer. It takes a second argument for the radix, which specifies the base of the number in the string. The radix can be an integer between 2 and 36.

const a = parseInt("11", 2);
The radix variable says that 11 is in the binary system, or base 2. This example converts the string 11 to an integer 3.

===================================================
The conditional operator, also called the ternary operator, can be used as a one line if-else expression.

The syntax is a ? b : c, where a is the condition, b is the code to run when the condition returns true, and c is the code to run when the condition returns false.

The following function uses an if/else statement to check a condition:

function findGreater(a, b) {
  if(a > b) {
    return "a is greater";
  }
  else {
    return "b is greater or equal";
  }
}
This can be re-written using the conditional operator:

function findGreater(a, b) {
  return a > b ? "a is greater" : "b is greater or equal";
}


===================================================
function findGreaterOrEqual(a, b) {
  if (a === b) {
    return "a and b are equal";
  }
  else if (a > b) {
    return "a is greater";
  }
  else {
    return "b is greater";
  }
}
The above function can be re-written using multiple conditional operators:

function findGreaterOrEqual(a, b) {
  return (a === b) ? "a and b are equal" 
    : (a > b) ? "a is greater" 
    : "b is greater";
}



===================================================
Recursion is the concept that a function can be expressed in terms of itself. To help understand this, start by thinking about the following task: multiply the first n elements of an array to create the product of those elements. Using a for loop, you could do this:

  function multiply(arr, n) {
    let product = 1;
    for (let i = 0; i < n; i++) {
      product *= arr[i];
    }
    return product;
  }
However, notice that multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]. That means you can rewrite multiply in terms of itself and never need to use a loop.

  function multiply(arr, n) {
    if (n <= 0) {
      return 1;
    } else {
      return multiply(arr, n - 1) * arr[n - 1];
    }
  }



===================================================





===================================================





===================================================






===================================================





===================================================







===================================================





===================================================




===================================================



===================================================




===================================================




===================================================





===================================================





===================================================






===================================================





===================================================







===================================================







===================================================




===================================================



===================================================




===================================================




===================================================





===================================================





===================================================






===================================================





===================================================







===================================================







===================================================




===================================================



===================================================




===================================================




===================================================





===================================================





===================================================






===================================================





===================================================







===================================================







===================================================




===================================================



===================================================




===================================================




===================================================





===================================================





===================================================






===================================================





===================================================







===================================================






===================================================




===================================================



===================================================




===================================================




===================================================





===================================================





===================================================






===================================================





===================================================







===================================================